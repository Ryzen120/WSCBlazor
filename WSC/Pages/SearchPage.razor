@page "/search"
@page "/search/{SeriesCode}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims
@using WSCollector.Blazor.Components
@using WSCollector.Blazor.Models
@using WSCollector.Blazor.Services
@inject ICardService CardService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid">
    <h1>Card Search</h1>
    
    <CardSearchFilters Filter="@Filter" OnFilterChanged="HandleFilterChanged" ShowCollectionFilter="true" />
    
    @if (IsLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading cards...</p>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <span class="badge bg-primary">@TotalCards Total Cards</span>
                <span class="badge bg-secondary ms-2">Page @CurrentPage of @TotalPages</span>
            </div>
            
            <div class="btn-group">
                <button class="btn btn-outline-secondary" disabled="@(Cards?.Count == 0)" @onclick="ExportToCSV">
                    <i class="oi oi-data-transfer-download"></i> Export
                </button>
            </div>
        </div>
        
        <CardGrid 
            Cards="@Cards" 
            TotalCards="@TotalCards" 
            CurrentPage="@CurrentPage" 
            PageSize="@PageSize" 
            IsLoading="@IsLoading"
            OnPageChanged="HandlePageChanged" />
    }
</div>

@code {
    [Parameter]
    public string SeriesCode { get; set; }
    
    private List<Card> Cards { get; set; } = new List<Card>();
    private int TotalCards { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 20;
    private bool IsLoading { get; set; } = true;
    private int TotalPages => (int)Math.Ceiling((double)TotalCards / PageSize);
    private CardFilterOptions Filter { get; set; } = new CardFilterOptions();
    private string UserId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        }
        
        Filter.Page = CurrentPage;
        Filter.PageSize = PageSize;
        
        await LoadCards();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(SeriesCode) && Filter.Series != SeriesCode)
        {
            Filter.Series = SeriesCode;
            await LoadCards();
        }
        
        await ParseQueryString();
    }
    
    private async Task ParseQueryString()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("series", out var seriesParam))
        {
            Filter.Series = seriesParam.ToString();
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var searchParam))
        {
            Filter.SearchText = searchParam.ToString();
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var pageParam) && 
            int.TryParse(pageParam, out var page))
        {
            CurrentPage = page;
            Filter.Page = page;
        }
        
        await LoadCards();
    }
    
    private async Task LoadCards()
    {
        IsLoading = true;
        
        try
        {
            var result = await CardService.FilterCardsAsync(Filter);
            Cards = result.Cards;
            TotalCards = result.TotalCount;
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error loading cards: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private async Task HandleFilterChanged(CardFilterOptions newFilter)
    {
        Filter = newFilter;
        CurrentPage = 1;
        Filter.Page = 1;
        
        UpdateQueryString();
        await LoadCards();
    }
    
    private async Task HandlePageChanged(int page)
    {
        CurrentPage = page;
        Filter.Page = page;
        
        UpdateQueryString();
        await LoadCards();
    }
    
    private void UpdateQueryString()
    {
        var queryParams = new Dictionary<string, string>();
        
        if (!string.IsNullOrEmpty(Filter.Series))
        {
            queryParams["series"] = Filter.Series;
        }
        
        if (!string.IsNullOrEmpty(Filter.SearchText))
        {
            queryParams["search"] = Filter.SearchText;
        }
        
        if (CurrentPage > 1)
        {
            queryParams["page"] = CurrentPage.ToString();
        }
        
        var newUri = QueryHelpers.AddQueryString("/search", queryParams);
        NavigationManager.NavigateTo(newUri);
    }
    
    private void ExportToCSV()
    {
        // This would typically use JSInterop to trigger a download
        // For now, just a placeholder
    }
}