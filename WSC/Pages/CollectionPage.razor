@page "/collection"
@using WSC.Models
@using WSC.Services
@using WSC.Components
@using System.Security.Claims
@inject ICollectionService CollectionService
@inject ICardService CardService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
    <h1>My Collection</h1>

    <AuthorizeView>
        <Authorized>
            <div class="alert alert-info">
                You are viewing your personal collection.
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-warning">
                <p>You are currently viewing a guest collection. <a href="login">Sign in</a> or <a href="register">register</a> to save your collection permanently.</p>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="row">
        <div class="col-md-8">
            <CardSearchFilters Filter="@filterOptions" OnFilterChanged="HandleFilterChange" ShowCollectionFilter="false" />
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Collection Stats</h5>
                </div>
                <div class="card-body">
                    @if (stats != null)
                    {
                        <div class="stat-item">
                            <span class="stat-label">Total Unique Cards:</span>
                            <span class="stat-value">@stats.TotalUniqueCards</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Total Card Quantity:</span>
                            <span class="stat-value">@stats.TotalCardQuantity</span>
                        </div>

                        @if (stats.CardsByRarity.Count > 0)
                        {
                            <h6 class="mt-3">Cards by Rarity</h6>
                            @foreach (var rarity in stats.CardsByRarity.OrderBy(r => r.Key))
                            {
                                <div class="stat-item small">
                                    <span class="stat-label">@rarity.Key:</span>
                                    <span class="stat-value">@rarity.Value</span>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <p>Loading stats...</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <CardGrid Cards="@cards"
                  TotalCards="@totalCards"
                  CurrentPage="@currentPage"
                  PageSize="@pageSize"
                  IsLoading="@isLoading"
                  OnPageChanged="HandlePageChange"
                  OnCardSelected="HandleCardSelected" />
    </div>

    @if (cards.Count == 0 && !isLoading)
    {
        <div class="empty-collection mt-4 p-5 text-center bg-light rounded">
            <h4>Your collection is empty</h4>
            <p>Start building your collection by adding cards from the <a href="search">search page</a>.</p>
        </div>
    }
</div>

@code {
    private List<WSC.Models.Card> cards = new List<WSC.Models.Card>();
    private int totalCards = 0;
    private int currentPage = 1;
    private int pageSize = 20;
    private bool isLoading = false;
    private CollectionStatistics stats;
    private WSC.Models.CardFilterOptions filterOptions = new WSC.Models.CardFilterOptions { CollectionOnly = true };
    private string userId;
    private string guestId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            filterOptions.UserId = userId;
        }
        else
        {
            // Get or create guest ID (in a real app, this would use localStorage)
            guestId = "guest-" + Guid.NewGuid().ToString();
            filterOptions.GuestId = guestId;
        }

        await LoadCollection();
        await LoadCollectionStats();
    }

    private async Task LoadCollection()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            filterOptions.Page = currentPage;
            filterOptions.PageSize = pageSize;

            var result = await CollectionService.FilterCollectionAsync(filterOptions, userId, guestId);
            cards = result.Cards;
            totalCards = result.TotalCount;
        }
        catch (Exception ex)
        {
            // In a real app, you might want to log this error
            Console.Error.WriteLine($"Error loading collection: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCollectionStats()
    {
        try
        {
            stats = await CollectionService.GetStatisticsAsync(userId, guestId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading stats: {ex.Message}");
        }
    }

    private async Task HandleFilterChange(WSC.Models.CardFilterOptions options)
    {
        options.CollectionOnly = true; // Always enforce collection only
        options.UserId = userId;
        options.GuestId = guestId;

        filterOptions = options;
        currentPage = 1; // Reset to first page when filters change
        await LoadCollection();
    }

    private async Task HandlePageChange(int page)
    {
        currentPage = page;
        await LoadCollection();
    }

    private void HandleCardSelected(WSC.Models.Card card)
    {
        // Handle card selection if needed
    }
}