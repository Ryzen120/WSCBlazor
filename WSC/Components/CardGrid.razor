@using WSC.Models
@using WSC.Components
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGuestStorage GuestStorage

<div class="card-grid-container">
    @if (Cards == null || Cards.Count == 0)
    {
        <div class="no-cards-message">
            @if (IsLoading)
            {
                <div class="spinner-container">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading cards...</p>
                </div>
            }
            else
            {
                <p>No cards found matching your criteria.</p>
            }
        </div>
    }
    else
    {
        <div class="card-grid">
            @foreach (var card in Cards)
            {
                <div class="card-item">
                    <CardDisplay Card="card"
                                 IsSelected="SelectedCard?.CardId == card.CardId"
                                 UserId="@UserId"
                                 GuestId="@GuestId"
                                 OnSelect="@(c => SelectCard(c))"
                                 OnViewDetails="@(c => ViewCardDetails(c))" />
                </div>
            }
        </div>

        @if (TotalCards > PageSize)
        {
            <div class="pagination-container">
                <PageNavigation CurrentPage="CurrentPage"
                                TotalPages="@((int)Math.Ceiling((double)TotalCards / PageSize))"
                                OnPageChanged="ChangePage" />
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public List<WSC.Models.Card> Cards { get; set; }

    [Parameter]
    public int TotalCards { get; set; }

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = 20;

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    [Parameter]
    public EventCallback<WSC.Models.Card> OnCardSelected { get; set; }

    private WSC.Models.Card SelectedCard { get; set; }
    private string UserId { get; set; }
    private string GuestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        }
        else
        {
            // Get or create guest ID from local storage
            GuestId = await GetOrCreateGuestId();
        }
    }

    private async Task<string> GetOrCreateGuestId()
    {
        return await GuestStorage.GetGuestIdAsync();
    }

    private void ChangePage(int page)
    {
        if (OnPageChanged.HasDelegate)
        {
            OnPageChanged.InvokeAsync(page);
        }
    }

    private void SelectCard(WSC.Models.Card card)
    {
        SelectedCard = card;
        if (OnCardSelected.HasDelegate)
        {
            OnCardSelected.InvokeAsync(card);
        }
    }

    private void ViewCardDetails(WSC.Models.Card card)
    {
        NavigationManager.NavigateTo($"/card/{card.CardId}");
    }
}