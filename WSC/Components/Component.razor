@page "/component"
@using WSC.Models
@using WSC.Services
@using WSC.Components
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGuestStorage GuestStorage
@inject ICardService CardService

<div class="container">
    <h1>Component View</h1>

    <div class="row">
        <div class="col-md-12">
            <CardSearchFilters Filter="@filterOptions"
                               OnFilterChanged="HandleFilterChange"
                               ShowCollectionFilter="true" />
        </div>
    </div>

    <div class="mt-4">
        <CardGrid Cards="@cards"
                  TotalCards="@totalCards"
                  CurrentPage="@currentPage"
                  PageSize="@pageSize"
                  IsLoading="@isLoading"
                  OnPageChanged="HandlePageChange"
                  OnCardSelected="HandleCardSelected" />
    </div>
</div>

@code {
    private List<Card> cards = new List<Card>();
    private int totalCards = 0;
    private int currentPage = 1;
    private int pageSize = 20;
    private bool isLoading = false;
    private CardFilterOptions filterOptions = new CardFilterOptions();
    private string userId;
    private string guestId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            filterOptions.UserId = userId;
        }
        else
        {
            // Get or create guest ID from browser storage
            guestId = await GuestStorage.GetGuestIdAsync();
            filterOptions.GuestId = guestId;
        }

        await LoadCards();
    }

    private async Task LoadCards()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            filterOptions.Page = currentPage;
            filterOptions.PageSize = pageSize;

            var result = await CardService.FilterCardsAsync(filterOptions);
            cards = result.Cards;
            totalCards = result.TotalCount;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading cards: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleFilterChange(CardFilterOptions options)
    {
        filterOptions = options;
        currentPage = 1;
        await LoadCards();
    }

    private async Task HandlePageChange(int page)
    {
        currentPage = page;
        await LoadCards();
    }

    private void HandleCardSelected(Card card)
    {
        // Handle card selection
    }
}